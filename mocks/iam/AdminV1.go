// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "google.golang.org/genproto/googleapis/iam/admin/v1"

	gax "github.com/googleapis/gax-go/v2"

	mock "github.com/stretchr/testify/mock"
)

// AdminV1 is an autogenerated mock type for the AdminV1 type
type AdminV1 struct {
	mock.Mock
}

// CreateServiceAccount provides a mock function with given fields: ctx, req, opts
func (_m *AdminV1) CreateServiceAccount(ctx context.Context, req *admin.CreateServiceAccountRequest, opts ...gax.CallOption) (*admin.ServiceAccount, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.ServiceAccount
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateServiceAccountRequest, ...gax.CallOption) *admin.ServiceAccount); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreateServiceAccountRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAccountKey provides a mock function with given fields: ctx, req, opts
func (_m *AdminV1) CreateServiceAccountKey(ctx context.Context, req *admin.CreateServiceAccountKeyRequest, opts ...gax.CallOption) (*admin.ServiceAccountKey, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.ServiceAccountKey
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateServiceAccountKeyRequest, ...gax.CallOption) *admin.ServiceAccountKey); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServiceAccountKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreateServiceAccountKeyRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceAccount provides a mock function with given fields: ctx, req, opts
func (_m *AdminV1) DeleteServiceAccount(ctx context.Context, req *admin.DeleteServiceAccountRequest, opts ...gax.CallOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteServiceAccountRequest, ...gax.CallOption) error); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetServiceAccount provides a mock function with given fields: ctx, req, opts
func (_m *AdminV1) GetServiceAccount(ctx context.Context, req *admin.GetServiceAccountRequest, opts ...gax.CallOption) (*admin.ServiceAccount, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.ServiceAccount
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetServiceAccountRequest, ...gax.CallOption) *admin.ServiceAccount); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ServiceAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetServiceAccountRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
