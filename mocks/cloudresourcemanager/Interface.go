// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	logger "github.com/rockholla/go-lib/logger"
	mock "github.com/stretchr/testify/mock"

	v1 "google.golang.org/api/cloudresourcemanager/v1"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// DeleteProject provides a mock function with given fields: id
func (_m *Interface) DeleteProject(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableProjectServices provides a mock function with given fields: projectID, services
func (_m *Interface) EnableProjectServices(projectID string, services []string) error {
	ret := _m.Called(projectID, services)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(projectID, services)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureFolder provides a mock function with given fields: displayName, parent
func (_m *Interface) EnsureFolder(displayName string, parent string) (string, error) {
	ret := _m.Called(displayName, parent)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(displayName, parent)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(displayName, parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnsureFolderRoles provides a mock function with given fields: folder, member, roles
func (_m *Interface) EnsureFolderRoles(folder string, member string, roles []string) error {
	ret := _m.Called(folder, member, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(folder, member, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureOrganizationRoles provides a mock function with given fields: organization, member, roles
func (_m *Interface) EnsureOrganizationRoles(organization string, member string, roles []string) error {
	ret := _m.Called(organization, member, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(organization, member, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureProject provides a mock function with given fields: name, parent
func (_m *Interface) EnsureProject(name string, parent string) (string, int64, error) {
	ret := _m.Called(name, parent)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, parent)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(string, string) int64); ok {
		r1 = rf(name, parent)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(name, parent)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EnsureProjectRoles provides a mock function with given fields: project, member, roles
func (_m *Interface) EnsureProjectRoles(project string, member string, roles []string) error {
	ret := _m.Called(project, member, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(project, member, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFolder provides a mock function with given fields: displayName, parent
func (_m *Interface) GetFolder(displayName string, parent string) (string, error) {
	ret := _m.Called(displayName, parent)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(displayName, parent)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(displayName, parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: name, parent
func (_m *Interface) GetProject(name string, parent string) (*v1.Project, error) {
	ret := _m.Called(name, parent)

	var r0 *v1.Project
	if rf, ok := ret.Get(0).(func(string, string) *v1.Project); ok {
		r0 = rf(name, parent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectByID provides a mock function with given fields: id
func (_m *Interface) GetProjectByID(id string) (*v1.Project, error) {
	ret := _m.Called(id)

	var r0 *v1.Project
	if rf, ok := ret.Get(0).(func(string) *v1.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: credentials, log
func (_m *Interface) Initialize(credentials string, log logger.Interface) error {
	ret := _m.Called(credentials, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, logger.Interface) error); ok {
		r0 = rf(credentials, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFolderOrgPolicy provides a mock function with given fields: folder, policy
func (_m *Interface) SetFolderOrgPolicy(folder string, policy *v1.OrgPolicy) error {
	ret := _m.Called(folder, policy)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1.OrgPolicy) error); ok {
		r0 = rf(folder, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
