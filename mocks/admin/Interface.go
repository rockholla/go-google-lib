// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	logger "github.com/rockholla/go-lib/logger"
	mock "github.com/stretchr/testify/mock"

	v1 "google.golang.org/api/admin/directory/v1"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// DeleteGroup provides a mock function with given fields: name
func (_m *Interface) DeleteGroup(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMembership provides a mock function with given fields: group, member
func (_m *Interface) DeleteMembership(group string, member string) error {
	ret := _m.Called(group, member)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(group, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureGroup provides a mock function with given fields: name, description
func (_m *Interface) EnsureGroup(name string, description string) (*v1.Group, error) {
	ret := _m.Called(name, description)

	var r0 *v1.Group
	if rf, ok := ret.Get(0).(func(string, string) *v1.Group); ok {
		r0 = rf(name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnsureMembership provides a mock function with given fields: group, member
func (_m *Interface) EnsureMembership(group string, member string) (*v1.Member, error) {
	ret := _m.Called(group, member)

	var r0 *v1.Member
	if rf, ok := ret.Get(0).(func(string, string) *v1.Member); ok {
		r0 = rf(group, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(group, member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: credentialsJSON, domain, adminUsername, log
func (_m *Interface) Initialize(credentialsJSON string, domain string, adminUsername string, log logger.Interface) error {
	ret := _m.Called(credentialsJSON, domain, adminUsername, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, logger.Interface) error); ok {
		r0 = rf(credentialsJSON, domain, adminUsername, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
