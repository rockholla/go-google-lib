// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	logger "github.com/rockholla/go-lib/logger"
	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// EnsureRoles provides a mock function with given fields: billingAccount, member, roles
func (_m *Interface) EnsureRoles(billingAccount string, member string, roles []string) error {
	ret := _m.Called(billingAccount, member, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(billingAccount, member, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initialize provides a mock function with given fields: credentials, log
func (_m *Interface) Initialize(credentials string, log logger.Interface) error {
	ret := _m.Called(credentials, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, logger.Interface) error); ok {
		r0 = rf(credentials, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetProjectBillingAccount provides a mock function with given fields: projectID, billingAccountID
func (_m *Interface) SetProjectBillingAccount(projectID string, billingAccountID string) (string, error) {
	ret := _m.Called(projectID, billingAccountID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(projectID, billingAccountID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(projectID, billingAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
